import os
import asyncio
from typing import List, Optional, Dict, Tuple
from datetime import date, timedelta

import httpx
from dotenv import load_dotenv
from telegram import Update, InlineKeyboardButton, InlineKeyboardMarkup, ForceReply
from telegram.error import BadRequest
from telegram.constants import ParseMode
from telegram.ext import Application, CommandHandler, ContextTypes, CallbackQueryHandler, MessageHandler, filters

# DB imports for persisting user preferences
from sqlalchemy.orm import Session
from .db import SessionLocal, engine, Base
from .models import UserPref

load_dotenv()

API_BASE = os.getenv("API_BASE", "http://127.0.0.1:8000").rstrip("/")
SITE_BASE = os.getenv("SITE_BASE", "http://127.0.0.1:8000").rstrip("/")
BOT_TOKEN = os.getenv("TELEGRAM_BOT_TOKEN", "").strip()
DEFAULT_TOP = int(os.getenv("BOT_TOP_LIMIT", "5"))


def _period_params(period: str) -> Dict[str, str]:
    today = date.today()
    p = period.lower()
    if p in {"24h", "day", "today", "—Å–µ–≥–æ–¥–Ω—è"}:
        return {"today_only": "true"}
    if p in {"week", "–Ω–µ–¥–µ–ª—è"}:
        start = today - timedelta(days=7)
        return {"today_only": "false", "from_date": start.isoformat(), "to_date": today.isoformat()}
    if p in {"month", "–º–µ—Å—è—Ü"}:
        start = today - timedelta(days=30)
        return {"today_only": "false", "from_date": start.isoformat(), "to_date": today.isoformat()}
    # default
    return {"today_only": "true"}


async def _fetch_articles(limit: int = 10, q: Optional[str] = None, period: str = "24h", sources: Optional[List[str]] = None) -> List[dict]:
    params: Dict[str, str] = {"limit": str(limit), "offset": "0"}
    params.update(_period_params(period))
    if q:
        params["q"] = q
    if sources:
        params["sources"] = ",".join(sources)
    url = f"{API_BASE}/api/articles"
    async with httpx.AsyncClient(timeout=httpx.Timeout(15.0, connect=10.0, read=15.0)) as client:
        r = await client.get(url, params=params)
        r.raise_for_status()
        data = r.json()
        if isinstance(data, list):
            return data
        return []


def _format_article(a: dict, idx: int) -> str:
    title = a.get("title") or "üì∞ –ë–µ–∑ –∑–∞–≥–æ–ª–æ–≤–∫–∞"
    url = a.get("url") or ""
    source = a.get("source_title") or a.get("source_key") or "–ù–µ–∏–∑–≤–µ—Å—Ç–Ω—ã–π –∏—Å—Ç–æ—á–Ω–∏–∫"
    summary = a.get("summary") or a.get("snippet") or ""
    if summary and len(summary) > 400:
        summary = summary[:400].rstrip() + "‚Ä¶"

    # –ö—Ä–∞—Å–∏–≤–æ–µ —Ñ–æ—Ä–º–∞—Ç–∏—Ä–æ–≤–∞–Ω–∏–µ —Å —ç–º–æ–¥–∑–∏
    line1 = f"<b>üì∞ {idx}. {title}</b>"
    line2 = f"<i>üìå –ò—Å—Ç–æ—á–Ω–∏–∫: {source}</i>"

    # –î–æ–±–∞–≤–ª—è–µ–º –¥–∞—Ç—É –µ—Å–ª–∏ –µ—Å—Ç—å
    published_at = a.get("published_at")
    if published_at:
        line2 += f" ‚Ä¢ üïê {published_at[:10]}"  # –¢–æ–ª—å–∫–æ –¥–∞—Ç–∞

    line3 = f"\n{summary}" if summary else ""

    parts = [line1, line2]
    if line3:
        parts.append(line3)

    return "\n".join(parts)


async def start(update: Update, context: ContextTypes.DEFAULT_TYPE) -> None:
    welcome_text = (
        "üåü <b>–î–æ–±—Ä–æ –ø–æ–∂–∞–ª–æ–≤–∞—Ç—å –≤ NewsBrief!</b> üåü\n\n"
        "üì∞ <b>–í–∞—à –ø–µ—Ä—Å–æ–Ω–∞–ª—å–Ω—ã–π –∞–≥—Ä–µ–≥–∞—Ç–æ—Ä –Ω–æ–≤–æ—Å—Ç–µ–π</b>\n\n"
        "üì± –ó–¥–µ—Å—å –≤—ã –º–æ–∂–µ—Ç–µ:\n"
        "‚Ä¢ –ß–∏—Ç–∞—Ç—å —Å–≤–µ–∂–∏–µ –Ω–æ–≤–æ—Å—Ç–∏ –∏–∑ –ø—Ä–æ–≤–µ—Ä–µ–Ω–Ω—ã—Ö –∏—Å—Ç–æ—á–Ω–∏–∫–æ–≤\n"
        "‚Ä¢ –ò—Å–∫–∞—Ç—å –Ω–æ–≤–æ—Å—Ç–∏ –ø–æ –∫–ª—é—á–µ–≤—ã–º —Å–ª–æ–≤–∞–º\n"
        "‚Ä¢ –í—ã–±–∏—Ä–∞—Ç—å –∏–Ω—Ç–µ—Ä–µ—Å—É—é—â–∏–µ –≤–∞—Å –∏—Å—Ç–æ—á–Ω–∏–∫–∏\n"
        "‚Ä¢ –ü–æ–ª—É—á–∞—Ç—å –∫—Ä–∞—Å–∏–≤—ã–µ –∫–∞—Ä—Ç–æ—á–∫–∏ —Å –∏–∑–æ–±—Ä–∞–∂–µ–Ω–∏—è–º–∏\n\n"
        "üöÄ <b>–í—ã–±–µ—Ä–∏—Ç–µ –ø–µ—Ä–∏–æ–¥ –Ω–æ–≤–æ—Å—Ç–µ–π:</b>"
    )

    await update.message.reply_text(
        welcome_text,
        parse_mode=ParseMode.HTML,
        reply_markup=_main_keyboard()
    )


async def help_cmd(update: Update, context: ContextTypes.DEFAULT_TYPE) -> None:
    await start(update, context)


# In-memory cache for chat preferences (write-through to DB)
CHAT_PREFS: Dict[int, str] = {}
CHAT_SOURCES: Dict[int, List[str]] = {}
SOURCES_CACHE: List[Dict[str, str]] = []  # list of {key,title,...}


def _db_session() -> Session:
    return SessionLocal()


def _load_prefs(chat_id: int) -> None:
    """Hydrate in-memory caches from DB if present."""
    if chat_id in CHAT_PREFS and chat_id in CHAT_SOURCES:
        return
    with _db_session() as db:
        rec = db.query(UserPref).filter(UserPref.chat_id == chat_id).first()
        if rec:
            if chat_id not in CHAT_PREFS and rec.period:
                CHAT_PREFS[chat_id] = rec.period
            if chat_id not in CHAT_SOURCES and rec.sources_csv:
                CHAT_SOURCES[chat_id] = [s for s in (rec.sources_csv or '').split(',') if s]


def _save_period(chat_id: int, period: str) -> None:
    CHAT_PREFS[chat_id] = period
    with _db_session() as db:
        rec = db.query(UserPref).filter(UserPref.chat_id == chat_id).first()
        if not rec:
            rec = UserPref(chat_id=chat_id, period=period, sources_csv=None)
            db.add(rec)
        else:
            rec.period = period
        db.commit()


def _get_sources_list(chat_id: int) -> List[str]:
    _load_prefs(chat_id)
    return CHAT_SOURCES.get(chat_id, [])


def _set_sources_list(chat_id: int, arr: List[str]) -> None:
    CHAT_SOURCES[chat_id] = list(arr or [])
    with _db_session() as db:
        rec = db.query(UserPref).filter(UserPref.chat_id == chat_id).first()
        csv = ','.join([s for s in arr if s]) if arr else None
        if not rec:
            rec = UserPref(chat_id=chat_id, period=CHAT_PREFS.get(chat_id), sources_csv=csv)
            db.add(rec)
        else:
            rec.sources_csv = csv
        db.commit()


def _get_period(update: Update) -> str:
    chat_id = update.effective_chat.id if update.effective_chat else 0
    _load_prefs(chat_id)
    return CHAT_PREFS.get(chat_id, "24h")


def _set_period(update: Update, val: str) -> None:
    chat_id = update.effective_chat.id if update.effective_chat else 0
    _save_period(chat_id, val)


def _main_keyboard() -> InlineKeyboardMarkup:
    return InlineKeyboardMarkup([
        [
            InlineKeyboardButton("üì∞ –ü–æ—Å–ª–µ–¥–Ω–∏–µ –Ω–æ–≤–æ—Å—Ç–∏", callback_data="show:24h"),
        ],
        [
            InlineKeyboardButton("üìÖ –ù–æ–≤–æ—Å—Ç–∏ –∑–∞ –Ω–µ–¥–µ–ª—é", callback_data="show:week"),
        ],
        [
            InlineKeyboardButton("üìÜ –ù–æ–≤–æ—Å—Ç–∏ –∑–∞ –º–µ—Å—è—Ü", callback_data="show:month"),
        ],
        [
            InlineKeyboardButton("üîç –ü–æ–∏—Å–∫ –ø–æ –Ω–æ–≤–æ—Å—Ç—è–º", callback_data="search"),
        ],
        [
            InlineKeyboardButton("üß∞ –ù–∞—Å—Ç—Ä–æ–∏—Ç—å –∏—Å—Ç–æ—á–Ω–∏–∫–∏", callback_data="sources"),
        ],
    ])

def _search_keyboard() -> InlineKeyboardMarkup:
    return InlineKeyboardMarkup([
        [InlineKeyboardButton("‚ùå –û—Ç–º–µ–Ω–∞", callback_data="cancel_search")]
    ])


def _sources_keyboard(sources: List[Dict[str, str]], current: set) -> InlineKeyboardMarkup:
    rows = []
    row: List[InlineKeyboardButton] = []
    for s in sources or []:
        key = s.get("key") or ""
        title = s.get("title") or key
        mark = "‚úÖ" if key in current else "‚óª"
        btn = InlineKeyboardButton(f"{mark} {title}", callback_data=f"src:{key}")
        row.append(btn)
        if len(row) == 2:
            rows.append(row)
            row = []
    if row:
        rows.append(row)
    rows.append([InlineKeyboardButton("–ì–æ—Ç–æ–≤–æ", callback_data="src_done")])
    return InlineKeyboardMarkup(rows)


async def filters_cmd(update: Update, context: ContextTypes.DEFAULT_TYPE) -> None:
    p = _get_period(update)
    await update.message.reply_text(f"–¢–µ–∫—É—â–∏–π –ø–µ—Ä–∏–æ–¥: {p}", reply_markup=_main_keyboard())


def _parse_top_args(args: List[str]) -> Tuple[int, Optional[str], Optional[str]]:
    limit = DEFAULT_TOP
    q = None
    period = None
    if args:
        if args[0].isdigit():
            limit = max(1, min(20, int(args[0])))
            rest = args[1:]
        else:
            rest = args
        for t in rest:
            tl = t.lower()
            if tl in {"24h", "day", "today", "—Å–µ–≥–æ–¥–Ω—è", "–Ω–µ–¥–µ–ª—è", "week", "–º–µ—Å—è—Ü", "month"}:
                period = tl
        if rest:
            # detect period keywords
            joined = " ".join(rest).strip()
            tokens = [t.strip() for t in joined.split() if t.strip()]
            for t in tokens:
                tl = t.lower()
                if tl in {"24h", "day", "today", "—Å–µ–≥–æ–¥–Ω—è", "–Ω–µ–¥–µ–ª—è", "week", "–º–µ—Å—è—Ü", "month"}:
                    period = tl
            if period:
                q = " ".join([t for t in tokens if t.lower() not in {period}]) or None
            else:
                q = joined or None
    return limit, q, period


async def show_news(update: Update, context: ContextTypes.DEFAULT_TYPE, period: str = "24h", search_query: str = None) -> None:
    try:
        chat_id = update.effective_chat.id
        sel = _get_sources_list(chat_id)
        items = await _fetch_articles(limit=10, q=search_query, period=period, sources=sel)
        if not items:
            empty_messages = [
                "üì≠ –ü–æ –≤–∞—à–µ–º—É –∑–∞–ø—Ä–æ—Å—É –Ω–∏—á–µ–≥–æ –Ω–µ –Ω–∞–π–¥–µ–Ω–æ.\n\n–ü–æ–ø—Ä–æ–±—É–π—Ç–µ:\n‚Ä¢ –î—Ä—É–≥–∏–µ –∫–ª—é—á–µ–≤—ã–µ —Å–ª–æ–≤–∞\n‚Ä¢ –ë–æ–ª–µ–µ —à–∏—Ä–æ–∫–∏–π –ø–µ—Ä–∏–æ–¥ –≤—Ä–µ–º–µ–Ω–∏\n‚Ä¢ –ü—Ä–æ–≤–µ—Ä–∏—Ç—å –∏—Å—Ç–æ—á–Ω–∏–∫–∏",
                "ü§∑‚Äç‚ôÇÔ∏è –ù–æ–≤–æ—Å—Ç–∏ –Ω–µ –Ω–∞–π–¥–µ–Ω—ã!\n\n–í–æ–∑–º–æ–∂–Ω–æ:\n‚Ä¢ –ò–∑–º–µ–Ω–∏—Ç–µ –ø–æ–∏—Å–∫–æ–≤—ã–π –∑–∞–ø—Ä–æ—Å\n‚Ä¢ –í—ã–±–µ—Ä–∏—Ç–µ –¥—Ä—É–≥–æ–π –ø–µ—Ä–∏–æ–¥\n‚Ä¢ –ü—Ä–æ–≤–µ—Ä—å—Ç–µ –≤—ã–±—Ä–∞–Ω–Ω—ã–µ –∏—Å—Ç–æ—á–Ω–∏–∫–∏",
                "üîç –†–µ–∑—É–ª—å—Ç–∞—Ç—ã –Ω–µ –Ω–∞–π–¥–µ–Ω—ã\n\n–°–æ–≤–µ—Ç—ã:\n‚Ä¢ –ü–æ–ø—Ä–æ–±—É–π—Ç–µ —Å–∏–Ω–æ–Ω–∏–º—ã\n‚Ä¢ –£–º–µ–Ω—å—à–∏—Ç–µ –∫–æ–ª–∏—á–µ—Å—Ç–≤–æ —Å–ª–æ–≤ –≤ –∑–∞–ø—Ä–æ—Å–µ\n‚Ä¢ –í—ã–±–µ—Ä–∏—Ç–µ –±–æ–ª–µ–µ —à–∏—Ä–æ–∫–∏–π –ø–µ—Ä–∏–æ–¥"
            ]
            import random
            empty_text = random.choice(empty_messages)

            await context.bot.send_message(
                chat_id=update.effective_chat.id,
                text=empty_text,
                reply_markup=_main_keyboard()
            )
            return
            
        period_text = {
            "24h": "—Å–≤–µ–∂–∏—Ö –Ω–æ–≤–æ—Å—Ç–µ–π –∑–∞ –ø–æ—Å–ª–µ–¥–Ω–∏–µ 24 —á–∞—Å–∞ üì∞",
            "week": "–Ω–æ–≤–æ—Å—Ç–µ–π –∑–∞ –Ω–µ–¥–µ–ª—é üìÖ",
            "month": "–Ω–æ–≤–æ—Å—Ç–µ–π –∑–∞ –º–µ—Å—è—Ü üìÜ"
        }.get(period, "–Ω–æ–≤–æ—Å—Ç–µ–π")

        header = f"üì∞ <b>–ü–æ—Å–ª–µ–¥–Ω–∏–µ {period_text}</b>"
        if search_query:
            header = f"üîç <b>–†–µ–∑—É–ª—å—Ç–∞—Ç—ã –ø–æ–∏—Å–∫–∞: ¬´{search_query}¬ª</b>"
            
        await context.bot.send_message(
            chat_id=update.effective_chat.id,
            text=header,
            parse_mode=ParseMode.HTML
        )

        for i, article in enumerate(items, 1):
            text = _format_article(article, i)
            buttons = []
            if article.get("url"):
                buttons.append(InlineKeyboardButton("üìñ –ß–∏—Ç–∞—Ç—å —Å—Ç–∞—Ç—å—é", url=article["url"]))

            # Prefer sending photo when available to improve UX
            image_url = article.get("image_url")
            reply_kb = InlineKeyboardMarkup([buttons]) if buttons else None
            if image_url:
                try:
                    await context.bot.send_photo(
                        chat_id=update.effective_chat.id,
                        photo=image_url,
                        caption=text,
                        parse_mode=ParseMode.HTML,
                        reply_markup=reply_kb,
                        has_spoiler=False,
                    )
                    continue
                except BadRequest:
                    # fall back to text message if photo cannot be sent
                    pass

            await context.bot.send_message(
                chat_id=update.effective_chat.id,
                text=text,
                parse_mode=ParseMode.HTML,
                disable_web_page_preview=False,
                reply_markup=reply_kb,
            )

        # Show main menu after last article
        if items:
            menu_text = (
                f"‚úÖ –ü–æ–∫–∞–∑–∞–Ω—ã {len(items)} –Ω–æ–≤–æ—Å—Ç–µ–π\n\n"
                "üéØ –ß—Ç–æ –¥–∞–ª—å—à–µ?\n"
                "‚Ä¢ –í—ã–±–µ—Ä–∏—Ç–µ –¥—Ä—É–≥–æ–π –ø–µ—Ä–∏–æ–¥\n"
                "‚Ä¢ –ò—Å–ø–æ–ª—å–∑—É–π—Ç–µ –ø–æ–∏—Å–∫ –ø–æ –∫–ª—é—á–µ–≤—ã–º —Å–ª–æ–≤–∞–º\n"
                "‚Ä¢ –ù–∞—Å—Ç—Ä–æ–π—Ç–µ –∏—Å—Ç–æ—á–Ω–∏–∫–∏ –Ω–æ–≤–æ—Å—Ç–µ–π"
            )

            await context.bot.send_message(
                chat_id=update.effective_chat.id,
                text=menu_text,
                reply_markup=_main_keyboard()
            )

    except Exception as e:
        error_messages = [
            "‚ùå –ü—Ä–æ–∏–∑–æ—à–ª–∞ –æ—à–∏–±–∫–∞ –ø—Ä–∏ –ø–æ–ª—É—á–µ–Ω–∏–∏ –Ω–æ–≤–æ—Å—Ç–µ–π.\n\n–ü–æ–ø—Ä–æ–±—É–π—Ç–µ:\n‚Ä¢ –í—ã–±—Ä–∞—Ç—å –¥—Ä—É–≥–æ–π –ø–µ—Ä–∏–æ–¥ –≤—Ä–µ–º–µ–Ω–∏\n‚Ä¢ –ü—Ä–æ–≤–µ—Ä–∏—Ç—å –ø–æ–¥–∫–ª—é—á–µ–Ω–∏–µ –∫ –∏–Ω—Ç–µ—Ä–Ω–µ—Ç—É\n‚Ä¢ –ü–æ–ø—Ä–æ–±–æ–≤–∞—Ç—å –ø–æ–∑–∂–µ",
            "‚ö†Ô∏è –ß—Ç–æ-—Ç–æ –ø–æ—à–ª–æ –Ω–µ —Ç–∞–∫!\n\n–í–æ–∑–º–æ–∂–Ω—ã–µ –ø—Ä–∏—á–∏–Ω—ã:\n‚Ä¢ –ü—Ä–æ–±–ª–µ–º—ã —Å –∏—Å—Ç–æ—á–Ω–∏–∫–∞–º–∏ –Ω–æ–≤–æ—Å—Ç–µ–π\n‚Ä¢ –í—Ä–µ–º–µ–Ω–Ω—ã–µ —Ç–µ—Ö–Ω–∏—á–µ—Å–∫–∏–µ –Ω–µ–ø–æ–ª–∞–¥–∫–∏\n‚Ä¢ –ü—Ä–æ–≤–µ—Ä—å—Ç–µ –ø–æ–¥–∫–ª—é—á–µ–Ω–∏–µ –∫ –∏–Ω—Ç–µ—Ä–Ω–µ—Ç—É",
            "üö´ –û—à–∏–±–∫–∞ –∑–∞–≥—Ä—É–∑–∫–∏ –Ω–æ–≤–æ—Å—Ç–µ–π\n\n–ü–æ–ø—Ä–æ–±—É–π—Ç–µ:\n‚Ä¢ –ü–µ—Ä–µ–∑–∞–ø—É—Å—Ç–∏—Ç—å –±–æ—Ç–∞ –∫–æ–º–∞–Ω–¥–æ–π /start\n‚Ä¢ –í—ã–±—Ä–∞—Ç—å –¥—Ä—É–≥–æ–π –ø–µ—Ä–∏–æ–¥ –Ω–æ–≤–æ—Å—Ç–µ–π\n‚Ä¢ –ü–æ–ø—Ä–æ–±–æ–≤–∞—Ç—å –ø–æ–∑–∂–µ"
        ]
        import random
        error_text = random.choice(error_messages)

        await context.bot.send_message(
            chat_id=update.effective_chat.id,
            text=error_text,
            reply_markup=_main_keyboard()
        )


async def error_handler(update: object, context: ContextTypes.DEFAULT_TYPE) -> None:
    """–û–±—Ä–∞–±–æ—Ç—á–∏–∫ –æ—à–∏–±–æ–∫ –¥–ª—è graceful –∑–∞–≤–µ—Ä—à–µ–Ω–∏—è"""
    try:
        if update and hasattr(update, 'effective_chat') and update.effective_chat:
            await context.bot.send_message(
                chat_id=update.effective_chat.id,
                text="‚ö†Ô∏è –ü—Ä–æ–∏–∑–æ—à–ª–∞ —Ç–µ—Ö–Ω–∏—á–µ—Å–∫–∞—è –æ—à–∏–±–∫–∞. –ü–æ–ø—Ä–æ–±—É–π—Ç–µ –ø–æ–∑–∂–µ –∏–ª–∏ –ø–µ—Ä–µ–∑–∞–ø—É—Å—Ç–∏—Ç–µ –±–æ—Ç–∞ –∫–æ–º–∞–Ω–¥–æ–π /start",
                reply_markup=_main_keyboard()
            )
    except Exception:
        pass  # –ò–≥–Ω–æ—Ä–∏—Ä—É–µ–º –æ—à–∏–±–∫–∏ –≤ –æ–±—Ä–∞–±–æ—Ç—á–∏–∫–µ –æ—à–∏–±–æ–∫

    # –õ–æ–≥–∏—Ä—É–µ–º –æ—à–∏–±–∫—É –¥–ª—è –æ—Ç–ª–∞–¥–∫–∏
    print(f"Bot error: {context.error}")


async def handle_text(update: Update, context: ContextTypes.DEFAULT_TYPE) -> None:
    chat_id = update.effective_chat.id
    text = update.message.text.strip()

    if SEARCH_STATE.get(chat_id):
        SEARCH_STATE.pop(chat_id, None)
        await show_news(update, context, period="24h", search_query=text)
    else:
        await start(update, context)


# Store search state per chat
SEARCH_STATE: Dict[int, bool] = {}

async def on_callback(update: Update, context: ContextTypes.DEFAULT_TYPE) -> None:
    q = update.callback_query
    if not q or not q.data:
        return

    # –ü—Ä–æ–≤–µ—Ä—è–µ–º —á—Ç–æ callback query –Ω–µ —É—Å—Ç–∞—Ä–µ–ª
    if not q.message:
        print("Received callback query for deleted message")
        return

    chat_id = update.effective_chat.id
    data = q.data

    try:
        if data == "search":
            SEARCH_STATE[chat_id] = True
            # Try to remove previous inline keyboard to not confuse the user
            try:
                await q.message.edit_reply_markup(reply_markup=None)
            except BadRequest:
                pass
            await q.message.reply_text(
                "üîç <b>–ü–æ–∏—Å–∫ –Ω–æ–≤–æ—Å—Ç–µ–π</b>\n\n"
                "–ù–∞–ø–∏—à–∏—Ç–µ –∫–ª—é—á–µ–≤—ã–µ —Å–ª–æ–≤–∞ –¥–ª—è –ø–æ–∏—Å–∫–∞ –Ω–æ–≤–æ—Å—Ç–µ–π.\n"
                "–ù–∞–ø—Ä–∏–º–µ—Ä:\n"
                "‚Ä¢ Python –ø—Ä–æ–≥—Ä–∞–º–º–∏—Ä–æ–≤–∞–Ω–∏–µ\n"
                "‚Ä¢ –ò—Å–∫—É—Å—Å—Ç–≤–µ–Ω–Ω—ã–π –∏–Ω—Ç–µ–ª–ª–µ–∫—Ç\n"
                "‚Ä¢ –ú–∞—à–∏–Ω–Ω–æ–µ –æ–±—É—á–µ–Ω–∏–µ\n"
                "‚Ä¢ –í–µ–±-—Ä–∞–∑—Ä–∞–±–æ—Ç–∫–∞\n\n"
                "<i>–ü–æ–∏—Å–∫ –±—É–¥–µ—Ç –≤—ã–ø–æ–ª–Ω–µ–Ω –ø–æ –≤—Å–µ–º –∞–∫—Ç–∏–≤–Ω—ã–º –∏—Å—Ç–æ—á–Ω–∏–∫–∞–º –Ω–æ–≤–æ—Å—Ç–µ–π.</i>",
                parse_mode=ParseMode.HTML,
                reply_markup=ForceReply(selective=True)
            )
            await q.answer()
            return

        if data == "cancel_search":
            SEARCH_STATE.pop(chat_id, None)
            await q.message.reply_text(
                "‚ùå –ü–æ–∏—Å–∫ –æ—Ç–º–µ–Ω–µ–Ω.\n\n–í—ã–±–µ—Ä–∏—Ç–µ –ø–µ—Ä–∏–æ–¥ –Ω–æ–≤–æ—Å—Ç–µ–π –∏–ª–∏ –ø–æ–ø—Ä–æ–±—É–π—Ç–µ –¥—Ä—É–≥–∏–µ —Ñ—É–Ω–∫—Ü–∏–∏:",
                reply_markup=_main_keyboard()
            )
            await q.answer()
            return

        if data.startswith("show:"):
            period = data.split(":", 1)[1]
            await show_news(update, context, period)
            await q.answer()
            return

        # Sources menu
        if data == "sources":
            # fetch sources from API if cache empty
            if not SOURCES_CACHE:
                try:
                    async with httpx.AsyncClient(timeout=httpx.Timeout(10.0, connect=5.0, read=10.0)) as client:
                        r = await client.get(f"{API_BASE}/api/sources")
                        r.raise_for_status()
                        arr = r.json()
                        if isinstance(arr, list):
                            SOURCES_CACHE.clear()
                            SOURCES_CACHE.extend(arr)
                except Exception as e:
                    print(f"Error fetching sources: {e}")
                    await q.answer("‚ùå –û—à–∏–±–∫–∞ –∑–∞–≥—Ä—É–∑–∫–∏ –∏—Å—Ç–æ—á–Ω–∏–∫–æ–≤")
                    return

            current = set(_get_sources_list(chat_id))
            kb = _sources_keyboard(SOURCES_CACHE, current)
            await q.message.edit_text(
                "üß∞ <b>–ù–∞—Å—Ç—Ä–æ–π–∫–∞ –∏—Å—Ç–æ—á–Ω–∏–∫–æ–≤ –Ω–æ–≤–æ—Å—Ç–µ–π</b>\n\n"
                "–í—ã–±–µ—Ä–∏—Ç–µ –∏—Å—Ç–æ—á–Ω–∏–∫–∏, –Ω–æ–≤–æ—Å—Ç–∏ –∫–æ—Ç–æ—Ä—ã—Ö —Ö–æ—Ç–∏—Ç–µ –ø–æ–ª—É—á–∞—Ç—å:\n"
                "‚Ä¢ ‚úÖ - –∏—Å—Ç–æ—á–Ω–∏–∫ –≤–∫–ª—é—á–µ–Ω\n"
                "‚Ä¢ ‚óª - –∏—Å—Ç–æ—á–Ω–∏–∫ –æ—Ç–∫–ª—é—á–µ–Ω\n\n"
                "<i>–í—ã –º–æ–∂–µ—Ç–µ –≤–∫–ª—é—á–∏—Ç—å/–æ—Ç–∫–ª—é—á–∏—Ç—å –ª—é–±–æ–π –∏—Å—Ç–æ—á–Ω–∏–∫.</i>",
                parse_mode=ParseMode.HTML,
                reply_markup=kb
            )
            await q.answer()
            return

        if data.startswith("src:"):
            key = data.split(":", 1)[1]
            cur = set(_get_sources_list(chat_id))
            if key in cur:
                cur.remove(key)
            else:
                cur.add(key)
            _set_sources_list(chat_id, list(cur))
            kb = _sources_keyboard(SOURCES_CACHE, cur)
            try:
                await q.edit_message_reply_markup(reply_markup=kb)
            except BadRequest as e:
                if "Message is not modified" in str(e):
                    # Message content is the same, just answer without editing
                    await q.answer()
                    return
                # fallback: re-send text with keyboard
                await q.message.edit_text(
                    "üß∞ <b>–ù–∞—Å—Ç—Ä–æ–π–∫–∞ –∏—Å—Ç–æ—á–Ω–∏–∫–æ–≤ –Ω–æ–≤–æ—Å—Ç–µ–π</b>\n\n"
                    "–í—ã–±–µ—Ä–∏—Ç–µ –∏—Å—Ç–æ—á–Ω–∏–∫–∏, –Ω–æ–≤–æ—Å—Ç–∏ –∫–æ—Ç–æ—Ä—ã—Ö —Ö–æ—Ç–∏—Ç–µ –ø–æ–ª—É—á–∞—Ç—å:\n"
                    "‚Ä¢ ‚úÖ - –∏—Å—Ç–æ—á–Ω–∏–∫ –≤–∫–ª—é—á–µ–Ω\n"
                    "‚Ä¢ ‚óª - –∏—Å—Ç–æ—á–Ω–∏–∫ –æ—Ç–∫–ª—é—á–µ–Ω\n\n"
                    "<i>–í—ã –º–æ–∂–µ—Ç–µ –≤–∫–ª—é—á–∏—Ç—å/–æ—Ç–∫–ª—é—á–∏—Ç—å –ª—é–±–æ–π –∏—Å—Ç–æ—á–Ω–∏–∫.</i>",
                    parse_mode=ParseMode.HTML,
                    reply_markup=kb
                )
            await q.answer()
            return

        if data == "src_done":
            sel = _get_sources_list(chat_id)
            if sel:
                sources_text = f"‚úÖ –í—ã–±—Ä–∞–Ω–æ {len(sel)} –∏—Å—Ç–æ—á–Ω–∏–∫–æ–≤ –Ω–æ–≤–æ—Å—Ç–µ–π"
            else:
                sources_text = "üìã –í—ã–±—Ä–∞–Ω—ã –≤—Å–µ –¥–æ—Å—Ç—É–ø–Ω—ã–µ –∏—Å—Ç–æ—á–Ω–∏–∫–∏"

            await q.message.edit_text(
                f"{sources_text}\n\n"
                "üéØ –¢–µ–ø–µ—Ä—å –≤—ã –±—É–¥–µ—Ç–µ –ø–æ–ª—É—á–∞—Ç—å –Ω–æ–≤–æ—Å—Ç–∏ —Ç–æ–ª—å–∫–æ –∏–∑ –≤—ã–±—Ä–∞–Ω–Ω—ã—Ö –∏—Å—Ç–æ—á–Ω–∏–∫–æ–≤.\n\n"
                "–ü–æ–ø—Ä–æ–±—É–π—Ç–µ –ø–æ—Å–º–æ—Ç—Ä–µ—Ç—å –Ω–æ–≤–æ—Å—Ç–∏ –∏–ª–∏ –∏–∑–º–µ–Ω–∏—Ç—å –ø–µ—Ä–∏–æ–¥!",
                reply_markup=_main_keyboard()
            )
            await q.answer()
            return

    except Exception as e:
        print(f"Error in callback handler: {e}")
        try:
            await q.answer("‚ùå –ü—Ä–æ–∏–∑–æ—à–ª–∞ –æ—à–∏–±–∫–∞")
        except Exception:
            pass


def main() -> None:
    if not BOT_TOKEN:
        raise SystemExit("TELEGRAM_BOT_TOKEN –Ω–µ –∑–∞–¥–∞–Ω –≤ –æ–∫—Ä—É–∂–µ–Ω–∏–∏")
    # Ensure DB schema exists (includes user_prefs)
    try:
        Base.metadata.create_all(bind=engine)
    except Exception:
        pass

    application = Application.builder().token(BOT_TOKEN).build()

    # –î–æ–±–∞–≤–ª—è–µ–º –æ–±—Ä–∞–±–æ—Ç—á–∏–∫ –æ—à–∏–±–æ–∫
    application.add_error_handler(error_handler)

    # Handlers
    application.add_handler(CommandHandler("start", start))
    application.add_handler(CommandHandler("help", start))  # Reuse start as help
    application.add_handler(CallbackQueryHandler(on_callback))
    application.add_handler(MessageHandler(filters.TEXT & ~filters.COMMAND, handle_text))

    print("ü§ñ –ë–æ—Ç –∑–∞–ø—É—â–µ–Ω –∏ –≥–æ—Ç–æ–≤ –∫ —Ä–∞–±–æ—Ç–µ!")
    application.run_polling(close_loop=False)


if __name__ == "__main__":
    main()
